def print_grid(grid):
    for row in grid:
        print(" ".join(str(num) if num != 0 else "." for num in row))

def find_empty(grid):
    """Find an empty cell in the grid (returns tuple (row, col)), or None if full."""
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return (i, j)
    return None

def is_valid(grid, num, pos):
    """Check if placing num at pos (row, col) is valid per Sudoku rules."""
    row, col = pos
    if any(grid[row][i] == num for i in range(9)):
        return False
    if any(grid[i][col] == num for i in range(9)):
        return False
    box_x = col // 3
    box_y = row // 3
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if grid[i][j] == num:
                return False
    return True

def solve_sudoku(grid):
    """Solves the Sudoku puzzle using backtracking. Modifies grid in-place."""
    empty = find_empty(grid)
    if not empty:
        return True 
    row, col = empty
    for num in range(1, 10):
        if is_valid(grid, num, (row, col)):
            grid[row][col] = num
            if solve_sudoku(grid):
                return True
            grid[row][col] = 0 
    return False

if __name__ == "__main__":
    puzzle = [
        [5, 1, 7, 6, 0, 0, 0, 3, 4],
        [2, 8, 9, 0, 0, 4, 0, 0, 0],
        [3, 4, 6, 2, 0, 5, 0, 9, 0],
        [6, 0, 2, 0, 0, 0, 0, 1, 0],
        [0, 3, 8, 0, 0, 6, 0, 4, 7],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 9, 0, 0, 0, 0, 0, 7, 8],
        [7, 0, 3, 4, 0, 0, 5, 6, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    print("Unsolved Sudoku:")
    print_grid(puzzle)
    if solve_sudoku(puzzle):
        print("\nSolved Sudoku:")
        print_grid(puzzle)
    else:
        print("No solution exists.")
